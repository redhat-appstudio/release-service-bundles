---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: get-git-sha-image-ref-from-release
  labels:
    app.kubernetes.io/version: "0.1.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "release, tenant"
spec:
  description: >-
    Tekton task to output the imageRef stored in the Release artifacts that corresponds to the git sha tag.
  params:
    - name: release
      type: string
      description: The namespaced name of the Release
  results:
    - name: imageRef
      type: string
      description: The imageRef from the Release.Status.Artifacts that uses the git sha tag
  steps:
    - name: get-git-sha-image-ref-from-release
      image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
      script: |
        #!/usr/bin/env bash
        set -euxo pipefail

        IFS='/' read -r RELEASE_NAMESPACE RELEASE_NAME <<< "$(params.release)"

        GIT_SHA=$(kubectl get release "$RELEASE_NAME" -n "$RELEASE_NAMESPACE" \
          -o jsonpath='{.metadata.labels.pac\.test\.appstudio\.openshift\.io/sha}')
        if [ -z "$GIT_SHA" ] ; then
            echo "Error: git sha label from PaC not found in Release labels"
            exit 1
        fi

        IMAGES=$(kubectl get release "$RELEASE_NAME" -n "$RELEASE_NAMESPACE" \
          -o jsonpath='{.status.artifacts.images}')
        if [ -z "$IMAGES" ] ; then
            echo "Error: no images found in Release Status Artifacts"
            exit 1
        fi

        if [ "$(jq 'length // 0' <<< "$IMAGES")" -ne 1 ] ; then
            echo "Error: this task only supports Release CRs with one image in its artifacts."
            echo "Found images: $IMAGES"
            exit 1
        fi

        REF=$(jq -jr --arg sha "$GIT_SHA" '.[0].urls[] | select(test(".*" + $sha))' <<< "$IMAGES")
        if [ -z "$REF" ] ; then
            echo "Error: imageRef with git sha tag not found in Release artifacts"
            exit 1
        fi
        echo -n "$REF" > "$(results.imageRef.path)"
