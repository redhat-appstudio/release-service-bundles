---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: push-artifacts-to-cdn-task
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  description: >-
    Tekton task to push artifacts to CDN and optionally Dev Portal with optional signing
  params:
    - name: snapshot_json
      type: string
      description: String containing a JSON representation of the snapshot spec
    - name: exodusGwSecret
      type: string
      description: Env specific secret containing the Exodus Gateway configs
    - name: exodusGwEnv
      type: string
      description: Environment to use in the Exodus Gateway. Options are [live, pre]
    - name: pulpSecret
      type: string
      description: Env specific secret containing the rhsm-pulp credentials
    - name: udcacheSecret
      type: string
      description: Env specific secret containing the udcache credentials
    - name: cgwHostname
      type: string
      description: Env specific hostname for content gateway
    - name: cgwSecret
      type: string
      description: Env specific secret containing the content gateway credentials
  results:
    - name: result
      description: Success if the task succeeds, the error otherwise
  workspaces:
    - name: data
      description: The workspace where pulled binaries are stored
  steps:
    - name: push-images
      image: quay.io/konflux-ci/release-service-utils:7835e32b1974f956a6c942e24adbc79705cab12e
      env:
        - name: EXODUS_CERT
          valueFrom:
            secretKeyRef:
              name: $(params.exodusGwSecret)
              key: cert
        - name: EXODUS_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.exodusGwSecret)
              key: key
        - name: EXODUS_URL
          valueFrom:
            secretKeyRef:
              name: $(params.exodusGwSecret)
              key: url
        - name: PULP_URL
          valueFrom:
            secretKeyRef:
              name: $(params.pulpSecret)
              key: pulp_url
        - name: PULP_CERT
          valueFrom:
            secretKeyRef:
              name: $(params.pulpSecret)
              key: konflux-release-rhsm-pulp.crt
        - name: PULP_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.pulpSecret)
              key: konflux-release-rhsm-pulp.key
        - name: UDC_URL
          valueFrom:
            secretKeyRef:
              name: $(params.udcacheSecret)
              key: url
        - name: UDC_CERT
          valueFrom:
            secretKeyRef:
              name: $(params.udcacheSecret)
              key: cert
        - name: UDC_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.udcacheSecret)
              key: key
        - name: DOCKER_CONFIG_JSON
          valueFrom:
            secretKeyRef:
              name: redhat-workloads-token
              key: .dockerconfigjson
        - name: "SNAPSHOT_JSON"
          value: "$(params.snapshot_json)"
        - name: CGW_USERNAME
          valueFrom:
            secretKeyRef:
              name: $(params.cgwSecret)
              key: username
        - name: CGW_PASSWORD
          valueFrom:
            secretKeyRef:
              name: $(params.cgwSecret)
              key: token
      script: |
        #!/usr/bin/env bash
        set -ex

        STDERR_FILE=/tmp/stderr.txt

        exitfunc() {
            local err=$1
            local line=$2
            local command="$3"
            if [ "$err" -eq 0 ] ; then
                echo -n "Success" > "$(results.result.path)"
            else
                echo "$0: ERROR '$command' failed at line $line - exited with status $err" \
                  > "$(results.result.path)"
                if [ -f "$STDERR_FILE" ] ; then
                    tail -n 20 "$STDERR_FILE" >> "$(results.result.path)"
                fi
            fi
            exit 0 # exit the script cleanly as there is no point in proceeding past an error or exit call
        }
        # due to set -e, this catches all EXIT and ERR calls and the task should never fail with nonzero exit code
        trap 'exitfunc $? $LINENO "$BASH_COMMAND"' EXIT

        # Setup required variables
        export EXODUS_GW_CERT=/tmp/exodus.crt
        export EXODUS_GW_KEY=/tmp/exodus.key
        export PULP_CERT_FILE=/tmp/pulp.crt
        export PULP_KEY_FILE=/tmp/pulp.key
        export UDCACHE_CERT=/tmp/udc.crt
        export UDCACHE_KEY=/tmp/udc.key
        EXODUS_GW_ENV=$(params.exodusGwEnv)
        export EXODUS_GW_ENV
        export EXODUS_GW_URL="$EXODUS_URL"
        export EXODUS_PULP_HOOK_ENABLED=True
        export EXODUS_GW_TIMEOUT=7200
        mkdir -p ~/.docker

        set +x
        echo "$EXODUS_CERT" > "$EXODUS_GW_CERT"
        echo "$EXODUS_KEY" > "$EXODUS_GW_KEY"
        echo "$PULP_CERT" > "$PULP_CERT_FILE"
        echo "$PULP_KEY" > "$PULP_KEY_FILE"
        echo "$UDC_CERT" > "$UDCACHE_CERT"
        echo "$UDC_KEY" > "$UDCACHE_KEY"
        # Quotes are added to the secret so it applies in k8s nicely. But now we have to remove them
        echo "$DOCKER_CONFIG_JSON" | sed -r 's/(^|\})[^{}]+(\{|$)/\1\2/g' > ~/.docker/config.json
        set -x

        DISK_IMAGE_DIR="$(workspaces.data.path)/artifacts"
        export DISK_IMAGE_DIR

        process_component_for_developer_portal() { # Expected argument are [component json], [content_directory]
          COMPONENT=$1

          contentGatewayConfig="$(jq -c '.contentGateway // {}' <<< "${COMPONENT}")"
          contentGatewayConfigSize="$(jq  '. | length' <<< "${contentGatewayConfig}")"
          if [ "${contentGatewayConfigSize}" == "0" ]; then
            echo "Configuration is not defined for Developer Portal publishing...skipping component"
            return
          fi

          productName="$(jq -er '.productName' <<< "${contentGatewayConfig}")" \
            || (echo "Missing contentGateway.productName value for component. This should be an existing product \
                  in the Developer Portal. Failing" && exit 1)

          productCode="$(jq -er '.productCode' <<< "${contentGatewayConfig}")" \
            || (echo "Missing contentGateway.productCode value for component. This should be an existing product \
                  in the Developer Portal. Failing" && exit 1)

          productVersionName="$(jq -er '.productVersionName' <<< "${contentGatewayConfig}")" \
            || (echo "Missing contentGateway.productVersionName value for component. This should be an existing \
                  product in the Developer Portal. Failing" && exit 1)

          filePrefix="$(jq -er '.filePrefix' <<< "${contentGatewayConfig}")" \
            || (echo "Missing contentGateway.filePrefix value for component. This should be the prefix for files to \
                  upload to the Developer Portal. Failing" && exit 1)

          developer_portal_wrapper --debug --product-name "${productName}" \
            --product-code "${productCode}" \
            --product-version-name "${productVersionName}" \
            --cgw-hostname "$(params.cgwHostname)" \
            --content-directory "$2" \
            --file-prefix "${filePrefix}"

        }

        # use the 1st component's version
        VERSION=$(jq -cr '.components[0].staged.version // ""' <<< "$SNAPSHOT_JSON")
        if [ "${VERSION}" == "" ] ; then
          echo "Error: version not specified in .components[0].staged.version. Needed to publish to customer portal"
          exit 1
        fi

        # Change to the subdir with the images
        cd "${DISK_IMAGE_DIR}"

        STAGED_JSON='{"header":{"version": "0.2"},"payload":{"files":[]}}'

        # Add the files to the payload
        # shell check wants us to find ./* but that adds `./` to the paths which breaks the script
        # shellcheck disable=SC2035
        while IFS= read -r -d '' file ; do
            STAGED_JSON=$(jq --arg filename "$(basename "$file")" --arg path "$file" \
              --arg version "$VERSION" \
              '.payload.files[.payload.files | length] =
              {"filename": $filename, "relative_path": $path, "version": $version}' <<< "$STAGED_JSON")
        done < <(find * -type f -print0)

        echo "$STAGED_JSON" | yq -P -I 4 > staged.yaml

        pulp_push_wrapper --debug --source "${DISK_IMAGE_DIR}" --pulp-url "$PULP_URL" \
          --pulp-cert $PULP_CERT_FILE --pulp-key $PULP_KEY_FILE --udcache-url "$UDC_URL" \
          2> "$STDERR_FILE"

        relative_paths=$(echo "$STAGED_JSON" | jq -erc .payload.files[].relative_path)
        component_destinations=()
        for path in $relative_paths:
        do
          parent_dir=$(dirname "$path")
          component_destinations+=("${DISK_IMAGE_DIR}/$parent_dir")
        done

        NUM_COMPONENTS=$(jq '.components | length' <<< "$SNAPSHOT_JSON")

        ## Process Files for Developer Portal / CGW
        ##
        NUM_COMPONENTS=$(jq '.components | length' <<< "$SNAPSHOT_JSON")
        for ((i = 0; i < NUM_COMPONENTS; i++)) ; do
            COMPONENT=$(jq -c --arg i "$i" '.components[$i|tonumber]' <<< "$SNAPSHOT_JSON")
            process_component_for_developer_portal "$COMPONENT" "${component_destinations[$i]}"  2> "$STDERR_FILE"
        done
