---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: publish-to-mrrc
  labels:
    app.kubernetes.io/version: "0.2.0"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: release
spec:
  params:
    - name: mrrcParamFilePath
      description: path of the env file for mrrc parameters to use
      type: string
    - name: charonConfigFilePath
      description: path of the charon config file for charon to consume
      type: string
    - name: charonAWSSecret
      description: the secret name for charon aws credential file
      type: string
  steps:
    - name: prepare-repo
      image: quay.io/konflux-ci/release-service-utils:4576e1e2a30439129cb69c8a4f39f7ced2d44376
      script: |
        #!/usr/bin/env bash
        set -eux

        MRRC_FILE="$(workspaces.data.path)/$(params.mrrcParamFilePath)"
        # shellcheck source=/dev/null
        . "$MRRC_FILE"
        mkdir -p /workdir/mrrc
        cd /workdir/mrrc

        IFS='%' read -ra ADDR <<< "$MRRC_ZIP_REGISTRY"
        for r in "${ADDR[@]}"
        do
          echo "Downloading the maven repo zip $r"
          SOURCE_REPO=${r%%@sha256:*}
          AUTH_FILE=$(mktemp)
          select-oci-auth "${SOURCE_REPO}" > "$AUTH_FILE"
          oras pull --registry-config "$AUTH_FILE" "$r" -o /workdir/mrrc
        done
      volumeMounts:
        - name: workdir
          mountPath: "/workdir"
    - name: upload-maven-repo
      image: quay.io/konflux-ci/charon@sha256:95b22f4f0fc1d6bb984a2f63334c3f66a539e433d79cde4eafa7731d8924377f
      script: |
        #!/usr/bin/env bash
        set -eux

        CHARON_CFG_FILE="$(workspaces.data.path)/$(params.charonConfigFilePath)"
        mkdir -p "/home/charon/.charon"
        cp "$CHARON_CFG_FILE" /home/charon/.charon/charon.yaml

        MRRC_FILE="$(workspaces.data.path)/$(params.mrrcParamFilePath)"
        # shellcheck source=/dev/null
        . "$MRRC_FILE"

        target=$MRRC_TARGET
        productName=$MRRC_PRODUCT_NAME
        productVersion=$MRRC_PRODUCT_VERSION

        work_dir="/workdir/mrrc"
        # Disable shell check sc2012 as find command is not installed
        # shellcheck disable=SC2012
        for r in $(ls "$work_dir"/*.zip | cat)
        do
          echo "Release $r with $productName-$productVersion into $target"
          charon upload -p "$productName" -v "$productVersion" -t "$target" "$r"
        done
      volumeMounts:
        - name: "charon-aws-vol"
          mountPath: "/home/charon/.aws"
        - name: workdir
          mountPath: "/workdir"
  volumes:
    - name: "charon-aws-vol"
      secret:
        secretName: "$(params.charonAWSSecret)"
    - name: workdir
      emptyDir: {}
  workspaces:
    - name: data
